/**
 * Change into the dummy app dir
 */
process.chdir('./app');

var  assert  = require('assert')
    ,Kernel  = require('../kernel/kernel.js')
    ,krnl    = new Kernel({ foo : 'bar' })
    ,beating = false;

/**
 * Test configuration merge
 */
assert.strictEqual(krnl.config.foo, 'bar');
console.log(krnl.utility.ansi('green', '[ OK ]') + ' config merge');

/**
 * Test include
 */
var cls = krnl.include(krnl.appdir + '/models/dummy');
assert.ok(typeof cls.new       === 'function');
assert.ok(typeof cls.singleton === 'function');
assert.ok(typeof cls.extends   === 'function');
assert.ok(typeof cls.module    === 'function');
assert.ok(typeof cls.prototype === 'object');
assert.ok(typeof cls.context   === 'object');
console.log(krnl.utility.ansi('green', '[ OK ]') + ' kernel include');

/**
 * Test module kernel binding
 */
var obj = cls.new();
assert.ok(obj.kernel instanceof Kernel);
console.log(krnl.utility.ansi('green', '[ OK ]') + ' kernel bind');

/**
 * Test module loading through Instance
 */
var  Instanceinc = krnl.include(krnl.kerneldir + '/instance')
    ,Instance    = Instanceinc.module
    ,inst        = Instanceinc.singleton()
    ,cls         = inst.model('dummy');

assert.ok(typeof cls.new       === 'function');
assert.ok(typeof cls.singleton === 'function');
assert.ok(typeof cls.extends   === 'function');
assert.ok(typeof cls.module    === 'function');
assert.ok(typeof cls.prototype === 'object');
assert.ok(typeof cls.context   === 'object');
console.log(krnl.utility.ansi('green', '[ OK ]') + ' instance include');

var obj = cls.new();
assert.ok(obj.instance instanceof Instance);
console.log(krnl.utility.ansi('green', '[ OK ]') + ' instance bind');

/**
 * Test for heartbeat
 */
krnl.once(krnl.HEARTBEAT, function() {
    beating = true;
});
setTimeout(function() {
    assert.ok(beating);
    console.log(krnl.utility.ansi('green', '[ OK ]') + ' heartbeat');
    krnl.shutdown();
}, 1500);

/**
 * Test for shutdown
 */
krnl.once(krnl.OFFLINE, function() {
    beating = false;
});
setTimeout(function() {
    assert.ok(!beating);
    console.log(krnl.utility.ansi('green', '[ OK ]') + ' shutdown');
}, 5000);