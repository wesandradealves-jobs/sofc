/******************************************************************************
 * Lemonade JS
 * https://lemonadejs.com
 *
 * ----
 *
 * Instance
 *
 *  Creates a context for loading models / controllers / intervals and setting
 *  different properties; it's not shared between requests and it's meant to
 *  clear all used memory by a request on request end
 *
 *  Has some basic abstract methods which instance creators should overload
 *
 *****************************************************************************/

function Instance () {
    this.id        = 'generic-' + Math.floor(Math.random() * 1000);
    this.starttime = new Date();
    this.endtime   = null;
}

/**
 * Dependencies
 */
var include = require('./include.js').include;

/**
 * Instance end
 * @abstract
 */
Instance.prototype.end = function(error, data) {};

/**
 * Instance echo
 * @abstract
 */
Instance.prototype.echo = function(data) {};

/**
 * Instance error
 * @abstract
 */
Instance.prototype.error = function(data) {};

/**
 * Include a controller
 * @param {String} path
 * @return {function}
 */
Instance.prototype.controller = function(path) {
    return include(
           this.kernel.appdir
         + this.kernel.config._KERNEL_DIR_CONTROLLERS + '/'
         + path
        ,this ,this.kernel
    );
};

/**
 * Include an interval
 * @param {String} path
 * @return {function}
 */
Instance.prototype.interval = function(path) {
    return include(
           this.kernel.appdir
         + this.kernel.config._KERNEL_DIR_INTERVALS + '/'
         + path
         ,this ,this.kernel
    );
};

/**
 * Include a model
 * @param {String} path
 * @return {function}
 */
Instance.prototype.model = function(path) {
    return include.call(this,
           this.kernel.appdir
         + this.kernel.config._KERNEL_DIR_MODELS + '/'
         + path
         ,this ,this.kernel
    );
};

/**
 * Include a view
 * @param {string} path
 * @param {object} vars
 * @return {object|string}
 */
Instance.prototype.view = function(path, vars) {
    var view = this.kernel.include(
        this.kernel.kerneldir + 'instance/view'
    ).new();
    path = this.kernel.appdir + 'views/' + path;
    if (!vars) {
        return view.load(path);
    } else {
        view.load(path);
        return view.parse(vars);
    }
};

/**
 * Export
 */
exports = module.exports = Instance;