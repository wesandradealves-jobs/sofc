/*****************************************************************************
 * Lemonade JS
 * https://lemonadejs.com
 *
 * ----
 *
 * Solr
 *
 *  Adaptor to connect to Solr, add/remove documents and search
 *
 * @param {Object} master
 * @param {Object} slave
 * @param {string} core
 *
 *****************************************************************************/

function Solr(master, slave, core) {
    /**
     * Master client
     */
    this._master = solr.createClient(
          master.host
        , master.port
        , master.core || core
        , '/solr'
    );
    if (master !== slave) {
        /**
         * Slave client
         */
        this._slave = solr.createClient(
              slave.host
            , slave.port
            , slave.core || core
            , '/solr'
        );
    } else {
        this._slave = this._master;
    }
}

/**
 * Module dependencies
 */
var   solr  = require('solr-client')
    , util  = require('util');

/**
 * Mark query as slow after threshold
 * @type {number}
 */
Solr.prototype.slowthreshold = 5000;

/**
 * Current connected core
 * @type {string}
 * @private
 */
Solr.prototype._core = '';

/**
 * Solr master connection reference
 */
Solr.prototype._master;

/**
 * Solr slave connection reference
 */
Solr.prototype._slave;

/**
 * Debug file
 * @type {string}
 * @private
 */
Solr.prototype._debugfile = 'solr.debug';

/**
 * Mysql slow query log
 * @type {string}
 * @private
 */
Solr.prototype._slowlogfile = 'solr.slow';

/**
 * Status object
 */
Solr.prototype.status = {
    ops : {
         add    : 0
        ,del    : 0
        ,search : 0
    }
    ,running : {}
};

/**
 * Add document[s]
 * @param {Array|Object} doc
 * @param {Function} callback
 * @return
 */
Solr.prototype.add = function(doc, callback) {
    var prepared = this._prepare(doc);
    this.kernel.debug('Adding ' + util.inspect(prepared), this._debugfile);
    this.status.ops.add++;
    this._master.add(prepared, callback);
};

/**
 * Transform object to solr document
 * @private
 * @param {object} doc
 * @return {array}
 */
Solr.prototype._prepare = function(doc) {
    var prepared = {}, key, ikey, iikey, date;
    for (key in doc) {
        /**
         * Transform date into ISO standard
         */
        if (key.indexOf('date') === 0) {
            if (typeof doc[key] === 'object') {
                for (ikey in doc[key]) {
                    prepared[key + '_' + ikey] = this.kernel.utility.date(
                         'yyyy-mm-ddTHH:ii:ssZ'
                        ,doc[key][ikey] * 1000
                    );
                }
            } else {
                prepared[key] = this.kernel.utility.date('yyyy-mm-ddTHH:ii:ssZ', doc[key] * 1000);
            }
        }
        /**
         * Transform prices into solr currency type
         */
        else if (key.indexOf('price') === 0) {
            if (typeof doc[key] === 'object') {
                for (ikey in doc[key]) {
                    prepared[key + '_' + ikey] = doc[key][ikey].amount + ',' +
                        doc[key][ikey].currency.toUpperCase();
                }
            } else {
                prepared[key] = doc[key].amount + ',' +
                    doc[key].currency.toUpperCase();
            }
        }
        /**
         * Normal objects + multivalue
         */
        else if (typeof doc[key] === 'object') {
            for (ikey in doc[key]) {
                if (typeof doc[key][ikey] === 'object') {
                    var foo = [];
                    for (iikey in doc[key][ikey]) {
                        foo.push(doc[key][ikey][iikey]);
                    }
                    prepared[key + '_' + ikey] = foo;
                } else {
                    prepared[key + '_' + ikey] = doc[key][ikey];
                }
            }
        /**
         * Basic column => value
         */
        } else {
            prepared[key] = doc[key];
        }
    }
    return prepared;
};

/**
 * Delete by id
 * @param {Number} id
 * @param {function} callback
 * @return
 */
Solr.prototype.delete = function(id, callback) {
    this.kernel.debug('Deleting ' + id, this._debugfile);
    this.status.ops.del++;
    this._master.deleteByID(id, callback);
};

/**
 * Return a query object. Configure your query :
 * http://lbdremy.github.com/solr-node-client/code/query.js.html
 * When ready, use search to execute the query
 * @return {Query}
 */
Solr.prototype.query = function() {
    return this._slave.createQuery();
};

/**
 * Execute the query (Must have a query constructed using Solr.query())
 * @param {Query} query
 * @param {Function} callback
 */
Solr.prototype.search = function(query, callback) {
    this.status.ops.search++;
    var qstart = this.kernel.utility.microtime();
    this._slave.search(query, function(error, object) {
        var   qend = this.kernel.utility.microtime()
            , qlog = ((qend - qstart) / 1000) + ' - ' +
                     this._core + ' - ' + util.inspect(query);
        if (qend - qstart > this.slowthreshold) {
            this.kernel.log(qlog, this._slowlogfile);
        }
        this.kernel.debug(qlog, this._debugfile);
        callback(error, object);
    }.bind(this));
};

/**
 * Shutdown placer todo: make this more than a dummy method
 * @param callback
 */
Solr.prototype.shutdown = function(callback) {
    callback();
};

/**
 * Export
 */
exports = module.exports = Solr;