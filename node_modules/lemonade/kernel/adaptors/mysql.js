/*****************************************************************************
 * Lemonade JS
 * https://lemonadejs.com
 *
 * ----
 *
 * Mysql
 *
 *  Adaptor to connect and execute queries on a Mysql replication farm. Will
 *  create different connections depending on the first word in the query,
 *  directing modifying requests to the master and selects to the slave
 *
 * @param {object} master
 * @param {object} slave
 * @param {string} db
 *
 *****************************************************************************/

function Mysql (master, slave, db) {
    this._db = db;
    this._masterpool = adaptor.createPool({
         host     : master.host
        ,port     : master.port
        ,user     : master.user
        ,password : master.pass
        ,database : db
        ,connectionLimit : 10
    });
    if (slave) {
        this._slavepool = adaptor.createPool({

             host     : slave.host
            ,port     : slave.port
            ,user     : slave.user
            ,password : slave.pass
            ,database : db
            ,connectionLimit : 10
        });
    } else {
        this._slavepool = this._masterpool;
        this.status.singlepool = true;
    }
}

/**
 * Module dependencies
 */
var adaptor = require('mysql')
    , util  = require('util');

/**
 * Status object
 */
Mysql.prototype.status = {
    querycnt : {
         master : 0
        ,slave  : 0
    }
    ,running : {}
    ,singlepool : false
};

/**
 * Mark query as slow after threshold
 * @type {number}
 */
Mysql.prototype.slowthreshold = 5000;

/**
 * Master connection pool
 */
Mysql.prototype._masterpool;

/**
 * Slave connection pool
 */
Mysql.prototype._slavepool;

/**
 * Keep the db for logging purposes
 * @type {string}
 * @private
 */
Mysql.prototype._db;

/**
 * Debug file
 * @type {string}
 * @private
 */
Mysql.prototype._debugfile = 'mysql.debug';

/**
 * Mysql slow query log
 * @type {string}
 * @private
 */
Mysql.prototype._slowlogfile = 'mysql.slow';

/**
 * Fetches a connection from the pool and runs a query
 * @param {string} query
 * @param {Array} params
 * @param {function} callback
 */
Mysql.prototype.query = function(query, params, callback) {
    var qstart = this.kernel.utility.microtime();
    this._choosePool(query).getConnection(function(err, conn) {
        if (!err) {
            /**
             * Add the query to the status object
             */
            var qid = Math.floor(Math.random() * 1000);
            this.status.running[qid] = {
                 query  : query
                ,params : params
                ,start  : this.kernel.utility.date('yyyy-mm-dd HH:ii:ss', qstart)
            };
            /**
             * Execute the query
             */
            var execute = function(query, params, callback, qid) {
                conn.query(query, params, function(err, results) {
                    var   qend = this.kernel.utility.microtime()
                        , qlog = ((qend - qstart) / 1000) + ' - ' +
                                 this._db + ' - ' + query + ' - ' + util.inspect(params);
                    if (qend - qstart > this.slowthreshold) {
                        this.kernel.log(qlog, this._slowlogfile);
                    }
                    this.kernel.debug(qlog, this._debugfile);
                    if (err) {
                        callback(
                            new Error('Mysql query error : ' + err.message)
                        );
                    } else {
                        callback(null, results);
                    }
                    /**
                     * Release the connection
                     */
                    conn.end();
                    /**
                     * Remove the query from the status object
                     */
                    delete this.status.running[qid];

                }.bind(this));
            }.bind(this); execute(query, params, callback, qid);

        } else {
            callback(
                new Error('Mysql connection error : ' + err.message)
            );
        }
    }.bind(this));
};

/**
 * Waits until all running queries are finished and loop through
 * the active connections in the pool and destroy them
 * @param {function} cb
 */
Mysql.prototype.shutdown = function(cb) {
    var intv = setInterval(function() {
        this.kernel.debug(
            'mysql running queries on ' + this._db + ' : ' +
             util.inspect(this.status.running)
        );
        this.kernel.debug(
            'mysql active master connections on ' + this._db + ' : ' +
             this._masterpool._allConnections.length
        );
        this.kernel.debug(
            'mysql active slave connections on ' + this._db + ' : ' +
             this._slavepool._allConnections.length
        );
        if (!Object.keys(this.status.running).length) {
            for (var key in this._masterpool._allConnections) {
                this._masterpool._allConnections[key].destroy();
            }
            for (var key in this._slavepool._allConnections) {
                this._slavepool._allConnections[key].destroy();
            }
            if (!this._masterpool._allConnections.length &&
                !this._slavepool._allConnections.length) {
                clearInterval(intv);
                cb();
            }
        }
    }.bind(this), 1000);
};

/**
 * Chooses connection pool based on first word inside the query
 * @param {string} query
 * @return {object}
 */
Mysql.prototype._choosePool = function(query) {
    var firstWord = query.substring(0, query.indexOf(' ')).toLowerCase();
    if (firstWord === 'select') {
        this.status.querycnt.slave++;
        return this._slavepool;
    }
    this.status.querycnt.master++;
    return this._masterpool;
};

/**
 * Exports
 */
exports = module.exports = Mysql;