/******************************************************************************
 * Lemonade JS
 * https://lemonadejs.com
 *
 * ----
 *
 * Solr link loader script
 *
 *****************************************************************************/

function solrLoader () {}

/**
 * Master config
 * @type {{}}
 */
solrLoader.prototype.master;

/**
 * Slave config
 * @type {{}}
 */
solrLoader.prototype.slave;

/**
 * Last used core
 * @type {string}
 */
solrLoader.prototype.lastcore = '';

/**
 * Adaptor options
 * @type {object}
 */
solrLoader.prototype.options;

/**
 * References to adaptors (a new adaptor is
 * created for each unique core)
 * @type {{}}
 */
solrLoader.prototype.adaptors = {};

/**
 * Try to execute a simple query on both master and slave
 * @param {object} master
 * @param {object} slave
 * @param {string} core
 * @param {function} cb
 * @param {object} options
 */
solrLoader.prototype.load = function(master, slave, core, options, cb) {
    /**
     * Check and throw
     */
    if (!master && !slave) {
        throw new Error(
            'Solr invalid config. Define host/user/pass/port ' +
            'in the configuration file'
        );
    }
    if (!core) {
        throw new Error(
            'Solr invalid config. Missing default core'
        );
    }
    /**
     * Populate defaults
     */
    if (master && !this.master) {
        this.master = master;
    }
    if (slave && !this.slave) {
        this.slave = slave;
    }
    if (!this.lastcore) {
        this.lastcore = core;
    }
    if (!this.options && options) {
        this.options = options;
    }
    /**
     * Get an adaptor singleton for our current config
     */
    var adaptor = this.kernel.include(this.kernel.kerneldir + 'adaptors/solr').singleton(
        core, master, slave, core
    );
    if (this.options && typeof this.options.slow !== 'undefined') {
        adaptor.slowthreshold = this.options.slow * 1000;
    }
    /**
     * Prepare a cb to be ran after executing a query on the master
     * and one on the slave
     */
    var precb = function(err) {
        if (err) {
            cb(err);
        } else {
            if (!--ntl) {
                this.adaptors[core] = adaptor;
                cb(null, '- solr `' + core + '` searcher up');
            }
        }
    }.bind(this) , ntl = 2;
    /**
     * Build a test query
     */
    var q = adaptor.query();
    q . q('test');
    q . rows(1);
    /**
     * Query the master, just to check it's there
     */
    adaptor._master.search(q, function(err) {
        precb(err);
    });
    /**
     * If we got a non-replication setup don't bother
     */
    if (slave && master !== slave) {
        /**
         * Test slave client
         */
        adaptor.search(q, function(err) {
            precb(err);
        });
    } else {
        precb();
    }
};

/**
 * Return a singleton for the adaptor based on the solr core (there will be a
 * different connection pool and adaptor object for each core name used)
 * @param {string} core
 * @param {function} cb
 */
solrLoader.prototype.link = function(core, cb) {
    core = core || this.lastcore;
    if (!this.adaptors[core]) {
        this.load(this.master, this.slave, core, this.options, function(err) {
            if (!err) {
                cb(null, this.adaptors[core]);
            } else {
                var error = new Error('Failed to load solr adaptor : ' + err.message);
                this.kernel.error(error);
                cb(error);
            }
        });
    } else {
        cb(null, this.adaptors[core]);
    }
};

/**
 * Gather up statuses from all open adaptors
 * @return {object}
 */
solrLoader.prototype.status = function() {
    var merge = {};
    for (var core in this.adaptors) {
        merge[core] = this.adaptors[core].status;
    }
    return merge;
};

/**
 * Unload all adaptors (prepare for shutdown)
 * @param {function} cb
 */
solrLoader.prototype.unload = function(cb) {
    var noloaded = Object.keys(this.adaptors).length;
    if (!noloaded) {
        cb(null, 'not started');
    } else {
        var searchers = [];
        for (var core in this.adaptors) {
            searchers.push('`' + core + '`');
            this.adaptors[core].shutdown(function() {
                if (!--noloaded) {
                    cb(null, '- solr searchers ' + searchers.join(', ') + ' stopped');
                }
            }.bind(this));
        }
    }
};

/**
 * Export
 */
exports = module.exports = solrLoader;