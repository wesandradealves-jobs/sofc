/******************************************************************************
 * Lemonade JS
 * https://lemonadejs.com
 *
 * ----
 *
 * Mysql link loader script
 *
 *****************************************************************************/

function mysqlLoader () {}

/**
 * Master config
 * @type {{}}
 */
mysqlLoader.prototype.master;

/**
 * Slave config
 * @type {{}}
 */
mysqlLoader.prototype.slave;

/**
 * Last db
 * @type {string}
 */
mysqlLoader.prototype.lastdb;

/**
 * Options
 * @type {{}}
 */
mysqlLoader.prototype.options;

/**
 * References to adaptors (a new adaptor is
 * created for each unique db)
 * @type {{}}
 */
mysqlLoader.prototype.adaptors = {};

/**
 * Name of the link that gets attached to
 * the kernel
 * @type {string}
 */
mysqlLoader.prototype.label;

/**
 * Try to execute a simple query on both master and slave
 * @param {object} master
 * @param {object} slave
 * @param {string} db
 * @param {object} options
 * @param {function} cb
 */
mysqlLoader.prototype.load = function(master, slave, db, options, cb) {
    /**
     * Check and throw
     */
    if (!master && !slave) {
        throw new Error(
            this.label + ' - ' +
            'Mysql invalid config. Define host/user/pass/port ' +
            'in the configuration file'
        );
    }
    if (!db) {
        throw new Error(
            this.label + ' - ' +
            'Mysql invalid config. Missing default db'
        );
    }
    /**
     * Populate defaults, if not done so
     */
    if (master && !this.master) {
        this.master = master;
    }
    if (slave && !this.slave) {
        this.slave = slave;
    }
    if (!this.lastdb) {
        this.lastdb = db;
    }
    if (!this.options && options) {
        this.options = options;
    }
    /**
     * Get an adaptor singleton for our current config
     */
    var adaptor = this.kernel.include(this.kernel.kerneldir + 'adaptors/mysql').singleton(
        db, master, slave, db
    );
    if (this.options && typeof this.options.slow !== 'undefined') {
        adaptor.slowthreshold = this.options.slow * 1000;
    }
    /**
     * Prepare a cb to be ran after executing a query on the master
     * and one on the slave
     */
    var precb = function(err) {
        if (err) {
            cb(err);
        } else {
            if (!--ntl) {
                this.adaptors[db] = adaptor;
                if (Object.keys(this.adaptors).length > 1) {
                    this.kernel.log(this.label + ' - mysql `' + db + '` pool up');
                }
                cb(null, '- mysql `' + db + '` pool up');
            }
        }
    }.bind(this), ntl = 2;
    /**
     * Try the query on the master
     */
    adaptor.query(
        '/*MASTER*/ SELECT 1'
        ,[]
        ,function(err) {
            precb(err);
        }.bind(this)
    );
    /**
     * If we got a non-replication setup don't bother
     */
    if (slave && master !== slave) {
        adaptor.query(
            'SELECT 1'
            ,[]
            ,function(err) {
                precb(err);
            }.bind(this)
        );
    } else {
        precb();
    }
};

/**
 * Return a singleton for the adaptor based on database (there will be a
 * different connection pool and adaptor object for each db name used)
 * @param {string} db
 * @param {function} cb
 */
mysqlLoader.prototype.link = function(db, cb) {
    db = db || this.lastdb;
    if (!this.adaptors[db]) {
        this.load(this.master, this.slave, db, this.options, function(err) {
            if (!err) {
                cb(null, this.adaptors[db]);
            } else {
                var error = new Error('Failed to load mysql adaptor : ' + err.message);
                this.kernel.error(error);
                cb(error);
            }
        }.bind(this));
    } else {
        cb(null, this.adaptors[db]);
    }
};

/**
 * Gather up statuses from all open adaptors
 * @return {object}
 */
mysqlLoader.prototype.status = function() {
    var merge = {};
    for (var db in this.adaptors) {
        merge[db] = this.adaptors[db].status;
    }
    return merge;
};

/**
 * Unload all adaptors (prepare for shutdown)
 * @param {function} cb
 */
mysqlLoader.prototype.unload = function(cb) {
    var noloaded = Object.keys(this.adaptors).length;
    if (!noloaded) {
        cb(null, 'pool not created');
    } else {
        var pools = [];
        for (var db in this.adaptors) {
            pools.push('`' + db + '`');
            this.adaptors[db].shutdown(function() {
                if (!--noloaded) {
                    cb(null, '- mysql pools ' + pools.join(', ') + ' drained');
                }
            }.bind(this));
        }
    }
};

/**
 * Export
 */
exports = module.exports = mysqlLoader;