/******************************************************************************
 * Lemonade JS
 * https://lemonadejs.com
 *
 * ----
 *
 * IncludeJs
 *
 *  Include .js (nodejs modules). Modules will be overloaded to contain :
 *   - .new(params) - instantiate the object
 *   - .singleton(key, params) - use an already instantiated object if available
 *   - .extends(proto) - extends the object's prototype
 *****************************************************************************/

/**
 * Include and overload a .js module
 * @param {string} path
 * @param {object} context
 * @param {object} kernel
 */
function include(path, context, kernel) {
    try {
        var   Module   = require(path + '.js')
            , Includer = { module : Module, prototype : Module.prototype, context : context };
    } catch (e) {
        throw new Error('Couldn\'t include module : ' + path + '.js' + ' : ' + e.message)
    }
    if (typeof Module !== 'function') {
        return kernel.fatal(
            new Error('Invalid module : ' + path + ' (check exports)')
        );
    }
    /**
     * Make kernel available for static methods
     * @type {Object}
     */
    Includer.module.kernel = kernel;
    /**
     * Overload the module prototype with properties from the
     * new proto
     * @param {*} proto
     */
    Includer.extends = function(proto) {
        var prototype = {};
        for (var key in this.prototype) {
            prototype[key] = this.prototype[key];
        }
        for (var key in proto) {
            prototype[key] = proto[key];
        }
        return {
             module    : Module
            ,prototype : prototype
            ,new       : Includer.new
            ,singleton : Includer.singleton
            ,context   : context
        }
    };
    /**
     * Instantiate a new object
     * @return {object}
     */
    Includer.new = function() {

        /**
         * Overload the object before actually creating it by calling
         * its constructor. Add the kernel and instance references.
         */
        var obj      = Object.create(this.prototype || {});
        obj.kernel   = kernel;
        obj.instance = context !== kernel ? context : null;

        /**
         * A limit on how many arguments can be used for constructing objects
         * todo : make this better
         */
        Module.call(obj, arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);

        return obj;
    };
    /**
     * Singleton based on path and optional key (as param)
     *
     * @param {string} key
     * @return {object}
     */
    Includer.singleton = function(key) {

        key = path + '-' + (key || true).toString();

        /**
         * Depending on where the method is called, the reference
         * to the object can be stored in another context
         * (other than kernel context)
         */
        if (typeof context._loaded === 'undefined') {
            context._loaded = [];
        }

        if (typeof context._loaded[key] !== 'undefined') {
            return context._loaded[key];
        }

        var obj      = Object.create(this.prototype || {});
        obj.kernel   = context.kernel || this.context;
        obj.instance = context !== kernel ? context : null;

        Module.call(obj, arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);

        this.context._loaded[key] = obj;
        return this.context._loaded[key];
    };
    return Includer;
}

/**
 * Clear require.cache
 * @param {object} kernel
 */
function clearcache(kernel) {
    for (var key in require.cache) {
        kernel.debug('found in require.cache : ' + key);
        if (key.indexOf(this.appdir) !== -1) {
            kernel.debug('cleared : ' + key);
            delete require.cache[key];
        }
    }
    kernel.log(
        kernel.utility.ansi('green', 'ok') + ' - '
        + 'cleared application cache'
    );
}

/**
 * Exports
 */
exports = module.exports = {
    include : include, clearcache : clearcache
};