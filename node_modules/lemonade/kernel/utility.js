/******************************************************************************
 * Lemonade JS
 * https://lemonadejs.com
 *
 * ----
 *
 * Utility
 *
 *  Common operations
 *
 *****************************************************************************/

function Utility() {}

/**
 * Dependencies
 */
var exec = require('child_process').exec;

/**
 * Current unixtime
 * @param {date|string|integer} date
 * @return {number}
 */
Utility.prototype.time = function(date) {
    return this.microtime(date) / 1000;
};

/**
 * Current microtime
 * @param {date|string|integer} date
 * @return {number}
 */
Utility.prototype.microtime = function(date) {
    if (date instanceof Date) {
        return date.getTime();
    } else if (typeof date !== 'undefined') {
        return new Date(date).getTime();
    } else {
        return new Date().getTime();
    }
};

/**
 * Format date
 * @param {string} format
 * @param {Date|string|integer} date
 * @return {string}
 */
Utility.prototype.date = function(format, date) {

    if (typeof format === 'undefined' || !format) {
        format = 'yyyy-mm-dd HH:ii:ss';
    }

    if (typeof date === 'undefined' || !date) {
        date = new Date();
    } else if (!(date instanceof Date)) {
        date = new Date(date);
    }

    var pad = function pad(n) {
        n = String(n);
        return n.length == 1 ? '0'+n : n
    }

    var  day    = date.getDate()
        ,month  = date.getMonth() + 1
        ,year   = date.getFullYear()
        ,yr     = year.toString().substring(2,4)
        ,min    = date.getMinutes()
        ,hour   = date.getHours()
        ,hr     = hour % 12 == 0 ? 12 : hour % 12
        ,sec    = date.getSeconds();

    format = format.replace('yyyy', year);
    format = format.replace('yy', yr);
    format = format.replace('mm', pad(month));
    format = format.replace('m', month);
    format = format.replace('dd', pad(day));
    format = format.replace('d', day);

    format = format.replace('HH', pad(hour)); //24h format with leading 0
    format = format.replace('H', hour);       //24h format without leading 0

    format = format.replace('hh', pad(hr));   //12h format with leading 0
    format = format.replace('h', hr);         //12h format without leading 0

    format = format.replace('ii', pad(min));
    format = format.replace('i', min);

    format = format.replace('ss', pad(sec));
    format = format.replace('s', sec);

    return format;
};

/**
 * Check if input is a numberic value
 * http://stackoverflow.com/a/1830844/356446
 * @param n
 * @returns {boolean}
 */
Utility.prototype.isNumber = function(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
};

/**
 * Used to store if the console can handle colours
 */
Utility.prototype._ansicheck;

/**
 * Add some colors to our console output
 * @param {string} color
 * @param {string} message
 * @return {string}
 */
Utility.prototype.ansi = function(color, message) {
    if (typeof this.ansicheck === 'undefined') {
        exec('tput colors', function(err, stdout, stderr) {
            if (stdout>0) {
                this.ansicheck = true;
            } else {
                this.ansicheck = false;
            }
        }.bind(this));
    }
    if (this.ansicheck !== false) {
        var code, bold = '\033[1m', reset = '\033[0m';
        switch (color) {
            case 'green'  : code = '\033[32m'; break;
            case 'yellow' : code = '\033[33m'; break;
            case 'red'    : code = '\033[31m'; break;
            case 'blue'   : code = '\033[34m'; break;
        }
        return bold + code + message + reset;
    }
    return message;
};

/**
 * Export
 */
exports = module.exports = Utility;