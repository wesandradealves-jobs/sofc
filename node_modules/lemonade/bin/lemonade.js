#!/usr/bin/env node

var   fs     = require('fs')
    , exec   = require('child_process').exec
    , cwd    = process.cwd()
    , path   = require('path')
    , kernel = require('../kernel/kernel.js')
    , usage  =

        '\n' +
        'Usage\t: lemonade [options] config-file.js\n' +
        'Options\t: \n' +
        '   --help,-h'           + '\t\tthis message\n' +
        '   --version,-v'        + '\t\tlemonade version\n' +
        '   --watch-changes,-w'  + '\twatch for changes in the app dir; gracefully restart when a file changes in the\n' +
                               '\t\t\tmodels or links dir or clear include cache when controllers, views or intervals change\n' +
        '   --rotate-logs,-r'    + '\trotate logs at given interval (default 1day)\n' +
        '   --debug,-d'          + '\t\tdebug mode, extra output in all logfiles\n' +
        '   --quiet,-q'          + '\t\tminimum output (disables daemon logs)\n';


if (process.argv[2] === 'install') {
    exec(
        'cp -rv ' + __dirname + '/../app/* ' + cwd,
        function (error, stdout, stderr) {
            if (!error) {
                console.log('Install completed');
            } else {
                console.log(error, stderr);
            }
        }
    );
} else {
    /**
     * Run options
     */
    for (var key in process.argv) {
        var eqpos = process.argv[key].indexOf('=');
        if (eqpos !== -1) {
            var option = process.argv[key].substring(0, eqpos)
               , value = process.argv[key].substring(eqpos + 1);
        } else {
            var option = process.argv[key]
               , value = null;
        }
        switch (option) {
            case '--help' :
            case '-h' :
                console.log(usage);
                process.exit(0);
                break;
            case '--version' :
            case '-v' :
                console.log(kernel.prototype.version);
                process.exit(0);
                break;
            case '--watch-changes' :
            case '-w' :
                var watch = true;
                break;
            case '--rotate-logs' :
            case '-r' :
                var   rotatelogs = true
                    , rotatehour = value || 3
                break;
            case '--debug' :
            case '-d' :
                if (typeof loglevel !== 'undefined') {
                    console.log('Cannot use -q and -d together');
                    process.exit(1);
                }
                var loglevel = kernel.prototype.LOGLEVEL_DEBUG;
            break;
            case '--quiet' :
            case '-q' :
                if (typeof loglevel !== 'undefined') {
                    console.log('Cannot use -q and -d together');
                    process.exit(1);
                }
                var loglevel = kernel.prototype.LOGLEVEL_QUIET;
            break;
        }
    }
    if (typeof loglevel === 'undefined') {
        var loglevel = kernel.prototype.LOGLEVEL_NORMAL;
    }
    var configfile = process.argv.pop();
    /**
     * Check the config file and chdir into it
     */
    if (fs.existsSync(cwd + '/' + configfile)) {
        var config = require(cwd + '/' + configfile)
            appdir = path.dirname(configfile);
        process.chdir(appdir);
    } else {
        console.log('Missing or invalid configuration file');
        console.log(usage);
        process.exit(1);
    }
    /**
     * Start the kernel
     */
    var start = function() {
        return new kernel(
             config.config
            ,config.boot
            ,config.run
            ,config.shutdown
            ,loglevel
        );
    }, krnlobj = start();
    /**
     * If watch changes, then restart the kernel everytime
     * a file changes inside the appdir
     */
    if (typeof watch !== 'undefined' && watch) {
        var
            md5sumreload, md5sumrestart
        ,   listen
        ,   watchintv = setInterval(function() {
                /**
                 * Start the kernel after receiving offline signal
                 */
                if (!listen) {
                    listen = true;
                    krnlobj.on(kernel.prototype.OFFLINE, function() {
                        krnlobj = start();
                        listen = false;
                    });
                }
                /**
                 * Get a md5sum of the restart dirs : models and links
                 */
                exec('ls -alR ' + krnlobj.appdir + krnlobj.config._KERNEL_DIR_MODELS    + ' ' +
                                  krnlobj.appdir + krnlobj.config._KERNEL_DIR_INTERVALS + ' ' +
                     ' | md5sum | sed s/[^a-zA-Z0-9]//g' , function(err, stdout, stderr) {
                    if (!err) {
                        if (md5sumrestart && md5sumrestart !== stdout) {
                            krnlobj.shutdown('appdir change detected, rebooting');
                        } else {
                            /**
                             * Get a md5sum of the reload dirs : controllers, views, intervals
                             */
                            exec('ls -alR ' + krnlobj.appdir + krnlobj.config._KERNEL_DIR_CONTROLLERS + ' ' +
                                              krnlobj.appdir + krnlobj.config._KERNEL_DIR_VIEWS       + ' ' +
                                              krnlobj.appdir + krnlobj.config._KERNEL_DIR_INTERVALS   + ' ' +
                                ' | md5sum | sed s/[^a-zA-Z0-9]//g', function(err, stdout, stderr) {
                                if (!err) {
                                    if (md5sumreload && md5sumreload !== stdout) {
                                        krnlobj.log(krnlobj.utility.ansi('blue',
                                            '[ appdir change detected, clearing cache ]'
                                        ));
                                        krnlobj.clearcache();
                                    }
                                    md5sumreload = stdout;
                                } else {
                                    console.log(err, stderr);
                                }
                            });
                        }
                        md5sumrestart = stdout;
                    } else {
                        console.log(err, stderr);
                    }
                });
                /**
                 * Get a md5sum of the reload dirs : views, controllers, intervals
                 */

        }, 1000);
        krnlobj.log(krnlobj.utility.ansi('green', 'ok') + ' - watching changes in appdir');
    }
    /**
     * Look inside logs dir and targz everything
     * and move it into logdir/archive/
     */
    if (typeof rotatelogs !== 'undefined' && rotatelogs && rotatehour) {
        var rotateintv = setInterval(function() {
            var now = new Date();
            if (now.getHours() === rotatehour && krnlobj.config && now.getTime() - lastrun.getTime() > onehour) {
                lastrun = new Date();
                if (!fs.existsSync(krnlobj.config.logpath + '/archive')) {
                    fs.mkdirSync(krnlobj.config.logpath + '/archive');
                    krnlobj.log('creating archive logdir - ' +  krnlobj.utility.ansi('green', 'ok'));
                }
                exec(
                    'cd ' + krnlobj.config.logpath + ' && ' +
                    'find *.log -print0 | xargs -0 -I {} mv {} ./archive/ && ' +
                    'cd ./archive && tar -czf "$(date --date=\'yesterday\' \'+%Y-%m-%d\').tgz" *.log && ' +
                    'rm *.log'
                    , function (err, stdout, stderr) {
                        if (err) {
                            krnlobj.error(
                                new Error(err.message || err + ';' + stderr)
                            );
                        } else {
                            krnlobj.log('rotating logs - ' +  krnlobj.utility.ansi('green', 'ok'));
                        }
                    }
                );
            }
        }, 60000), lastrun = new Date(), onehour = 1000 * 60 * 60;
        krnlobj.log('looking for logs to rotate (@' + rotatehour + ':00)- ' +  krnlobj.utility.ansi('green', 'ok'));
    }
    /**
     * Term signals
     */
    var shutdown = function() {
        krnlobj.removeAllListeners(kernel.prototype.OFFLINE);
        krnlobj.shutdown('got term signal, going down');
        if (watchintv) {
            clearInterval(watchintv);
        }
        if (rotateintv) {
            clearInterval(rotateintv);
        }
    };
    process.once('SIGTERM', shutdown);
    process.once('SIGINT',  shutdown);
}